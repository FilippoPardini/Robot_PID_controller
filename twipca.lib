/****************************************************************************
* ATxmega library for the LM629 - Version 1.0                               *
* Â© Copyright 2012,2013 Filippo Pardini - filippo@robotica.eng.br           *
*                                                                           *
* This program is free software: you can redistribute it and/or modify it   *
* under the terms of the GNU Lesser General Public License as published by  *
* the Free Software Foundation, either version 3 of the License, or any     *
* later version.                                                            *
*                                                                           *
* This program is distributed in the hope that it will be useful,           *
* but WITHOUT ANY WARRANTY; without even the implied warranty of            *
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the              *
* GNU Lesser General Public License for more details.                       *
*                                                                           *
* You should have received a copy of the GNU Lesser General Public License  *
* along with this program. If not, see <http://www.gnu.org/licenses/>.      *
****************************************************************************/

/*
Remember that the TWI bus must have pull-up resistors on SDA and SCL.
We recommend 1.8K or 4.7K resistors.
The TWI must be initialized as in the example below. In the example
has been used TWID:

*****************************************************************************

#include <twilcd.h>
.  .  .

// TWI clock rate [bps]
#define TWI_CLK_RATE 100000

// structure that holds information used by the TWID master
// for performing a TWI bus transaction
TWI_MASTER_INFO_t twid_master;

interrupt [TWID_TWIM_vect] void twid_master_isr(void)
{
    twi_master_int_handler(&twid_master);
}

void main(void)
{
    unsigned char h,m,s;

    // general TWID initialization
    // no external driver interface
    // no SDA hold time
    twi_init(&TWID,false,false);

    // initialize the TWID master
    twi_master_init(&twid_master,&TWID,TWI_MASTER_INTLVL_LO_gc,TWI_BAUD_REG(_MCU_CLOCK_FREQUENCY_,TWI_CLK_RATE));

    // set the PCA9554 functions to use TWID
    pca_twi_init(&twid_master);

    // enable LO interrupt level
    PMIC.CTRL |= PMIC_LOLVLEN_bm;

    // enable interrupts
    #asm("sei")

    // now the rest of the LCD03 functions can be used

    // ....
}

*****************************************************************************

*/

#include <twix.h>

#define True 1
#define False 0
#define input 0x00
#define output 0xFF

static TWI_MASTER_INFO_t *ptwi_master;

//**********************************************************************************************************************

void pca_twi_init(TWI_MASTER_INFO_t *ptwim)
{
    //Initializes PCA9554
    //ptwim - pointer to TWI

    ptwi_master = ptwim;
}

//______________________________________________________________________________________________________________________

bool Configure_Port(unsigned char addr,unsigned char reg)
{
    //Configures all the PCA9554 pins. 0 - input; 1 - output

    unsigned char w[2];

    w[0] = 0x03;

    //Inverts the pins value because the PCA9554 has an opposite convenction
    w[1] = reg ^ 0xFF;
    return twi_master_trans(ptwi_master,addr>>1,w,2,NULL,0);
}

//______________________________________________________________________________________________________________________

bool Configure_Pin(unsigned char addr,unsigned char pin,unsigned char val)
{
    //Configures a pin of the PCA9554 port
    // 0 => input; 1 => output

    unsigned char X;
    unsigned char w[2];
    bool r1;

    //Inverts the pin value because the PCA9554 has an opposite convenction
    val ^= 0x01;

    w[0] = 0x03;
    r1 = twi_master_trans(ptwi_master,addr>>1,&w[0],1,&X,1);

    if (val == 1) X |= (1 << pin);
    else X &= (~(1 << pin));
    w[1] = X;
    return (r1 & twi_master_trans(ptwi_master,addr>>1,w,2,NULL,0));
}

//______________________________________________________________________________________________________________________

bool Port_Polarity(unsigned char addr,unsigned char reg)
{
    //Defines the PCA9554 polarity. 0 - do not invert; 1 - invert

    unsigned char w[2];

    w[0] = 0x02;
    w[1] = reg;
    return twi_master_trans(ptwi_master,addr>>1,w,2,NULL,0);
}

//______________________________________________________________________________________________________________________

bool Pin_Polarity(unsigned char addr,unsigned char pin,unsigned char val)
{
    //Defines the polarity of a PCA9554 port pin. 0 - do not invert; 1 - invert

    unsigned char X;
    unsigned char w[2];
    bool r1;


    w[0] = 0x02;
    r1 = twi_master_trans(ptwi_master,addr>>1,&w[0],1,&X,1);

    if (val) X |= (1 << pin);
    else X &= (~(1 << pin));
    w[1] = X;
    return (r1 & twi_master_trans(ptwi_master,addr>>1,w,2,NULL,0));
}

//______________________________________________________________________________________________________________________

bool Put_Port(unsigned char addr,unsigned char port)
{
    //Sets the PCA9554 port to the value port

    unsigned char w[2];

    w[0] = 0x01;
    w[1] = port;
    return twi_master_trans(ptwi_master,addr>>1,w,2,NULL,0);
}

//______________________________________________________________________________________________________________________

bool Put_Pin(unsigned char addr,unsigned char Pin,unsigned char val)
{
    //Sets the PCA9554 port pin to the val value

    unsigned char X;
    unsigned char w[2];
    bool r1;

    w[0] = 0x01;
    r1 = twi_master_trans(ptwi_master,addr>>1,&w[0],1,&X,1);

    if (val) X |= (1 << Pin);
    else X &= (~(1 << Pin));
    w[1] = X;
    return (r1 & twi_master_trans(ptwi_master,addr>>1,w,2,NULL,0));
}

//______________________________________________________________________________________________________________________

unsigned char Get_Port(unsigned char addr)
{
    //Reads the PCA9554 port

    unsigned char w;
    unsigned char X;

    w = 0x00;
    twi_master_trans(ptwi_master,addr>>1,&w,1,&X,1);
    return X;
}

//______________________________________________________________________________________________________________________

bool Get_Pin(unsigned char addr,unsigned char pin)
{
    //Reads the PCA9554 port pin value

    if (Get_Port(addr) & (unsigned char)(1 << pin)) return true;
    else return False;
}

//**********************************************************************************************************************

